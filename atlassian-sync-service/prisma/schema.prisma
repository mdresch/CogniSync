generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SyncEvent {
  id                String             @id @default(uuid())
  type              String
  source            String
  timestamp         DateTime           @default(now())
  actorId           String?
  entityId          String?
  externalId        String?
  changes           Json?
  processingStatus  ProcessingStatus   @default(PENDING)
  errorMessage      String?
  retryCount        Int                @default(0)
  dlqPayload        Json?
  dlqError          String?
  dlqFailedAt       DateTime?
  dlqAttempts       Int?
  metadata          Json?
  tenantId          String
  configId          String?
  kgEntityId        String?
  kgRelationshipIds Json?
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  config            SyncConfiguration? @relation(fields: [configId], references: [id])
  webhookDeliveries WebhookDelivery[]

  @@index([timestamp])
  @@index([type])
  @@index([source])
  @@index([actorId])
  @@index([entityId])
  @@index([externalId])
  @@index([processingStatus])
  @@index([tenantId])
  @@index([configId])
  @@map("sync_events")
}

model SyncConfiguration {
  id            String      @id @default(uuid())
  name          String
  tenantId      String
  source        String
  enabled       Boolean     @default(true)
  webhookSecret String
  webhookUrl    String?
  kgServiceUrl  String      @default("http://localhost:3001/api/v1")
  kgApiKey      String
  mappingRules  Json
  filters       Json?
  batchSize     Int         @default(10)
  retryLimit    Int         @default(3)
  retryDelay    Int         @default(30000)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  syncEvents    SyncEvent[]

  @@unique([tenantId, source, name])
  @@index([tenantId])
  @@index([source])
  @@index([enabled])
  @@map("sync_configurations")
}

model Tenant {
  id             String              @id @default(uuid())
  name           String              @unique
  configurations SyncConfiguration[]
  syncEvents     SyncEvent[]
}

model UserMapping {
  id                 String   @id @default(uuid())
  tenantId           String
  atlassianAccountId String
  atlassianEmail     String?
  displayName        String
  kgEntityId         String?
  profile            Json?
  lastSyncAt         DateTime @default(now())
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([tenantId, atlassianAccountId])
  @@index([tenantId])
  @@index([atlassianAccountId])
  @@index([kgEntityId])
  @@map("user_mappings")
}

model EntityMapping {
  id           String   @id @default(uuid())
  tenantId     String
  source       String
  externalId   String
  externalType String
  kgEntityId   String
  lastSyncAt   DateTime @default(now())
  syncVersion  String?
  isActive     Boolean  @default(true)
  externalData Json?
  mappingRules Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([tenantId, source, externalId])
  @@index([tenantId])
  @@index([source])
  @@index([kgEntityId])
  @@index([externalId])
  @@map("entity_mappings")
}

model WebhookDelivery {
  id           String     @id @default(uuid())
  tenantId     String     @default("default")
  source       String
  webhookId    String?
  eventType    String
  payload      Json
  signature    String?
  receivedAt   DateTime   @default(now())
  processedAt  DateTime?
  status       String     @default("received")
  errorMessage String?
  syncEventId  String?
  syncEvent    SyncEvent? @relation(fields: [syncEventId], references: [id])

  @@index([tenantId])
  @@index([source])
  @@index([eventType])
  @@index([status])
  @@index([receivedAt])
  @@map("webhook_deliveries")
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRYING
  DEAD_LETTER
}
