
# The basic building block of our graph
type Entity {
	id: ID!
	type: String!
	name: String!
	# A flexible field for all other properties
	metadata: String # JSON string
}

# The connection between two entities
type Relationship {
	id: ID!
	type: String!
}

# The input for creating a new entity
input CreateEntityInput {
	id: ID # Optional: If provided, will be used as the node ID
	type: String!
	name: String!
	metadata: String # JSON string
}

# The input for linking two entities
input LinkEntitiesInput {
	sourceEntityId: ID!
	targetEntityId: ID!
	relationshipType: String!
}

type Query {
	"""
	Retrieves a single entity by its unique ID.
	"""
	getEntityById(id: ID!): Entity
}

type Mutation {
	"""
	Creates a new entity in the knowledge graph.
	This operation is idempotent: if an entity with the same ID already exists,
	it will be updated instead.
	"""
	createEntity(input: CreateEntityInput!): Entity

	"""
	Creates a directional relationship between two existing entities.
	"""
	linkEntities(input: LinkEntitiesInput!): String
}
